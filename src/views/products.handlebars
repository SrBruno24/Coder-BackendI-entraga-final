<div class="container mt-4">
  <div class="row">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h2">{{title}}</h1>
        <button class="btn btn-success" onclick="createAndGoToCart()">
          <i class="fas fa-shopping-cart"></i> Crear Carrito
        </button>
      </div>

      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Filtros y Ordenamiento</h5>
          <form id="filterForm" class="row g-3">
            <div class="col-md-3">
              <label for="limit" class="form-label">Productos por página</label>
              <select class="form-select" id="limit" name="limit">
                <option value="5" {{#if (eq filters.currentLimit 5)}}selected{{/if}}>5</option>
                <option value="10" {{#if (eq filters.currentLimit 10)}}selected{{/if}}>10</option>
                <option value="20" {{#if (eq filters.currentLimit 20)}}selected{{/if}}>20</option>
                <option value="50" {{#if (eq filters.currentLimit 50)}}selected{{/if}}>50</option>
              </select>
            </div>
            <div class="col-md-3">
              <label for="sort" class="form-label">Ordenar por precio</label>
              <select class="form-select" id="sort" name="sort">
                <option value="" {{#if (eq filters.currentSort "")}}selected{{/if}}>Sin ordenar</option>
                <option value="asc" {{#if (eq filters.currentSort "asc")}}selected{{/if}}>Menor a mayor</option>
                <option value="desc" {{#if (eq filters.currentSort "desc")}}selected{{/if}}>Mayor a menor</option>
              </select>
            </div>
            <div class="col-md-4">
              <label for="query" class="form-label">Filtrar por</label>
              <select class="form-select" id="query" name="query">
                <option value="" {{#if (eq filters.currentQuery "")}}selected{{/if}}>Todos los productos</option>
                <option value="available" {{#if (eq filters.currentQuery "available")}}selected{{/if}}>Disponibles</option>
                <option value="unavailable" {{#if (eq filters.currentQuery "unavailable")}}selected{{/if}}>No disponibles</option>
                <option value="electronica" {{#if (eq filters.currentQuery "electronica")}}selected{{/if}}>Electrónica</option>
                <option value="ropa" {{#if (eq filters.currentQuery "ropa")}}selected{{/if}}>Ropa</option>
                <option value="hogar" {{#if (eq filters.currentQuery "hogar")}}selected{{/if}}>Hogar</option>
              </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
              <button type="submit" class="btn btn-primary w-100">Aplicar</button>
            </div>
          </form>
        </div>
      </div>

      <div class="row">
        {{#if products}}
          {{#each products}}
          <div class="col-lg-4 col-md-6 mb-4">
            <div class="card h-100 product-card">
              {{#if thumbnails.[0]}}
              <img src="{{thumbnails.[0]}}" class="card-img-top" alt="{{title}}" style="height: 200px; object-fit: cover;">
              {{else}}
              <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                <i class="fas fa-image text-muted fa-3x"></i>
              </div>
              {{/if}}
              
              <div class="card-body d-flex flex-column">
                <h5 class="card-title">{{title}}</h5>
                <p class="card-text">{{description}}</p>
                <div class="mt-auto">
                  <div class="d-flex justify-content-between align-items-center mb-2">
                    <span class="h5 text-primary">{{formatPrice price}}</span>
                    <span class="badge {{statusBadge status}}">{{statusText status}}</span>
                  </div>
                  <div class="d-flex justify-content-between align-items-center mb-3">
                    <small class="text-muted">Stock: {{stock}}</small>
                    <small class="text-muted">{{category}}</small>
                  </div>
                  <div class="btn-group w-100" role="group">
                    <a href="/products/{{_id}}" class="btn btn-outline-primary btn-sm">Ver detalles</a>
                    {{#if status}}
                    <button class="btn btn-primary btn-sm" onclick="addToCart('{{_id}}', '{{title}}')">
                      <i class="fas fa-cart-plus"></i>
                    </button>
                    {{else}}
                    <button class="btn btn-secondary btn-sm" disabled>Sin stock</button>
                    {{/if}}
                  </div>
                </div>
              </div>
            </div>
          </div>
          {{/each}}
        {{else}}
          <div class="col-12">
            <div class="alert alert-info text-center">
              <i class="fas fa-info-circle"></i>
              No se encontraron productos con los filtros aplicados.
            </div>
          </div>
        {{/if}}
      </div>

      {{#if pagination}}
      <nav aria-label="Navegación de productos">
        <ul class="pagination justify-content-center">
          {{#if pagination.hasPrevPage}}
          <li class="page-item">
            <a class="page-link" href="{{pagination.prevLink}}">
              <i class="fas fa-chevron-left"></i> Anterior
            </a>
          </li>
          {{else}}
          <li class="page-item disabled">
            <span class="page-link">
              <i class="fas fa-chevron-left"></i> Anterior
            </span>
          </li>
          {{/if}}

          {{#each (range 1 pagination.totalPages)}}
          <li class="page-item {{#if (eq this ../pagination.currentPage)}}active{{/if}}">
            <a class="page-link" href="/products?page={{this}}&limit={{../filters.currentLimit}}{{#if ../filters.currentSort}}&sort={{../filters.currentSort}}{{/if}}{{#if ../filters.currentQuery}}&query={{../filters.currentQuery}}{{/if}}">
              {{this}}
            </a>
          </li>
          {{/each}}

          {{#if pagination.hasNextPage}}
          <li class="page-item">
            <a class="page-link" href="{{pagination.nextLink}}">
              Siguiente <i class="fas fa-chevron-right"></i>
            </a>
          </li>
          {{else}}
          <li class="page-item disabled">
            <span class="page-link">
              Siguiente <i class="fas fa-chevron-right"></i>
            </span>
          </li>
          {{/if}}
        </ul>
      </nav>

      <div class="text-center text-muted mb-4">
        Página {{pagination.currentPage}} de {{pagination.totalPages}}
      </div>
      {{/if}}
    </div>
  </div>
</div>

<script>
document.getElementById('filterForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const formData = new FormData(this);
  const params = new URLSearchParams();
  
  for (let [key, value] of formData.entries()) {
    if (value) params.set(key, value);
  }
  
  window.location.href = '/products?' + params.toString();
});

async function createAndGoToCart() {
  try {
    const response = await fetch('/create-cart', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      Swal.fire({
        icon: 'success',
        title: 'Carrito creado',
        text: 'Tu carrito ha sido creado exitosamente',
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        window.location.href = `/carts/${data.cartId}`;
      });
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'No se pudo crear el carrito: ' + error.message
    });
  }
}

async function addToCart(productId, productTitle) {
  let cartId = localStorage.getItem('currentCartId');
  
  // Si no hay carrito, crear uno primero
  if (!cartId) {
    try {
      const cartResponse = await fetch('/create-cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const cartData = await cartResponse.json();
      
      if (cartData.status === 'success') {
        cartId = cartData.cartId;
        localStorage.setItem('currentCartId', cartId);
      } else {
        throw new Error('No se pudo crear el carrito');
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se pudo crear el carrito: ' + error.message
      });
      return;
    }
  }
  
  // Agregar producto al carrito
  try {
    const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ quantity: 1 })
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      Swal.fire({
        icon: 'success',
        title: '¡Producto agregado!',
        text: `${productTitle} ha sido agregado al carrito`,
        showCancelButton: true,
        confirmButtonText: 'Ver carrito',
        cancelButtonText: 'Seguir comprando',
        timer: 3000,
        timerProgressBar: true
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = `/carts/${cartId}`;
        }
      });
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'No se pudo agregar el producto: ' + error.message
    });
  }
}</script>